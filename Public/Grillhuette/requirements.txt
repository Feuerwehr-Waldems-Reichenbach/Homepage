Hier die vollständig kombinierte, detaillierte Beschreibung der Anwendung, die sowohl visuell ansprechend als auch funktional optimal aufgebaut ist, um ein modernes, stabiles, sicheres und benutzerfreundliches System zu gewährleisten:

---

# 🌲 **Grillhütten-Reservierungssystem – Feuerwehr Waldems-Reichenbach**

Das Grillhütten-Reservierungssystem ist ein integriertes, modulares und modernes Online-Buchungssystem zur komfortablen Reservierung der Grillhütte in Waldems-Reichenbach. Es basiert technisch auf **PHP, HTML, CSS, JavaScript** und **MySQL** und ist nahtlos in eine bestehende Webseite integriert.

Es vereint klassische Buchungslogik mit einer modernen, klaren Oberfläche, die im Design das Branding der Freiwilligen Feuerwehr Reichenbach widerspiegelt. Im Zentrum steht dabei die Nutzerfreundlichkeit sowie die einfache Verwaltung durch die Feuerwehr.

---

## 🎨 **Visuelles Konzept**

### 🔴 **Modernes Farbschema (Feuerwehr-Thematik)**

| Farbe       | Verwendung                                           |
|-------------|------------------------------------------------------|
| `#A72920`   | Primärfarbe (Buttons, Header, Links)                 |
| `#FFFFFF`   | Hintergrund                                          |
| `#F5F5F5`   | Karten, Sekundärbereiche                             |
| `#222222`   | Haupttextfarbe                                       |
| `#777777`   | Sekundärtext (Labels, Hinweise)                      |
| `#2E8B57`   | Erfolg (verfügbar, bestätigt)                        |
| `#FF9900`   | Warnungen („Ausstehend“)                             |
| `#DD3333`   | Fehler / Belegung (reserviert)                       |

### 🔷 **Seitenaufbau (modern, bewährt und intuitiv)**

- **Header (sticky):**
  - Logo Feuerwehr Reichenbach links
  - Navigationsleiste (Startseite, Reservieren, Meine Buchungen, Admin)
  - Benutzer-Login/-Logout oben rechts

- **Footer (fix):**
  - Kontakt zur Feuerwehr Reichenbach
  - Impressum, Datenschutz
  - Gemeinde-/Feuerwehr-Wappen

- **Kalender & Interaktive Elemente:**
  - Dynamischer Kalender (FullCalendar.js)
  - Farbige Markierungen (rot: reserviert, grün: verfügbar, orange: ausstehend)
  - Tooltips bei Mouseover mit Infos (Benutzername, Status)

---

## 🖥️ **Visuelle & funktionelle Beschreibung (Benutzerperspektive)**

### 🔸 **Startseite (unauthentifiziert)**

**Optisch:**
- Modernes minimalistisches Design, Feuerwehr-Farben (`#A72920`) im Vordergrund
- Hero-Image der Grillhütte prominent sichtbar
- Kalender zentral, Login-/Registrierungsoption oben rechts klar erkennbar

**Funktionell:**
- Schnelle Übersicht der Verfügbarkeit im Kalender
- Klick auf freie Tage fordert Nutzer zum Login oder zur Registrierung auf

---

### 🔸 **Registrierung & Anmeldung**

**Optisch:**
- Kompakte, intuitive Formulare
- Klar abgegrenzte Felder: Name, E-Mail-Adresse, Passwort

**Funktionell:**
- Registrierung nur mit E-Mail-Verifikation
- Verschlüsselte Speicherung von Passwörtern (bcrypt)

---

### 🔸 **Reservierung erstellen**

**Optisch:**
- Übersichtliche Datumswahl im Kalender oder per manueller Eingabe
- Bevorzugte Uhrzeit auswählbar (standardmäßig 12:00 Uhr)
- Großes Eingabefeld für persönliche Anmerkungen

**Funktionell:**
- Automatische Prüfung und Blockierung belegter Tage
- Status „ausstehend“ nach Erstellung
- Nutzer erhält Zusammenfassung und Bestätigung per E-Mail

---

### 🔸 **Reservierungsübersicht (Benutzerbereich)**

**Optisch:**
- Klar getrennte Bereiche: „Zukünftige Reservierungen“ und „Vergangene Reservierungen“
- Statusanzeige deutlich hervorgehoben („Ausstehend“, „Bestätigt“, „Abgelehnt“)
- Admin-Kommentare gut lesbar dargestellt

**Funktionell:**
- Automatische Benachrichtigung bei Statusänderung per E-Mail
- Direkter Zugriff auf Admin-Nachricht

---

### 🔸 **Benutzerprofil-Einstellungen**

**Optisch:**
- Einfache Seite für schnelle Einstellungen
- Felder: Name, E-Mail, Passwortänderung klar gegliedert

**Funktionell:**
- Änderungen sicher gespeichert, erneute E-Mail-Verifikation bei Änderung

---

## ⚙️ **Admin-Bereich (Verwaltung durch Feuerwehr)**

### 🔸 **Dashboard**

**Optisch:**
- Kompakte Übersicht über Reservierungen mit Status und Terminen
- Direktzugriff auf wichtige Verwaltungsaufgaben

**Funktionell:**
- Schnelle Bearbeitung ausstehender Reservierungen

---

### 🔸 **Reservierungen verwalten**

**Optisch:**
- Tabellenform mit Such- und Filtermöglichkeiten
- Farbige Hervorhebung von Status

**Funktionell:**
- Bestätigung oder Ablehnung inklusive persönlicher Admin-Nachricht
- Automatische Benachrichtigung der Nutzer
- Automatische Löschung ausstehender Reservierungen nach 10 Tagen

---

### 🔸 **Benutzerverwaltung**

**Optisch:**
- Klare, einfache Auflistung aller Nutzer
- Admin-Nutzer farblich hervorgehoben

**Funktionell:**
- Nutzerinformationen bearbeiten, löschen oder Rechte ändern

---

## 🔄 **Automatische Hintergrundprozesse (Cronjob)**

- Automatische Löschung unbestätigter Reservierungen nach 10 Tagen
- Benachrichtigung betroffener Nutzer per E-Mail

---

## 📅 **Technische Beschreibung (Backend & Frontend)**

### 🔸 **Backend (PHP/MySQL):**
- MVC-orientierte Architektur (Controller-Model-View)
- Bestehende Datenbankverbindung integriert
- Nutzung vorhandener Mail-Komponenten (PHPMailer)
- Prepared Statements verhindern SQL-Injection

### 🔸 **Frontend (HTML/CSS/JS):**
- Responsives, mobiles Design (Mobile First)
- Klar strukturiertes CSS mit modularem Aufbau
- Dynamische Inhalte via AJAX/Fetch API (z.B. Kalender)
- Direkte Clientseitige Validierung (Usability)

---

## 📧 **E-Mail-Kommunikation**

- Einheitliches Layout mit Feuerwehr-Signatur
- Automatische Nachrichten bei Registrierung, Reservierung, Bestätigung oder Ablehnung

---

## 🛡️ **Sicherheitsmerkmale**

- Passwortverschlüsselung mit bcrypt
- Schutz vor SQL-Injection (Prepared Statements)
- E-Mail-Verifizierung gegen Spam

---

## 🚀 **Benutzerfreundlichkeit & UX-Highlights**

- Modale Dialoge für angenehme Nutzerführung
- Animationen (hover, klick) erhöhen Interaktivität und modernes Feeling
- Klare und transparente Statuskommunikation

---

## 🏕️ **Lokale Identität & Lokalisierung**

- Logo der Feuerwehr Reichenbach stets sichtbar
- Lokale Sprachbezüge („Grillplatz buchen“, „Verwaltet von Feuerwehr Reichenbach“)
- Möglichkeit zur Blockierung interner Tage (Übungen, Feste etc.)

---

## 📌 **Typischer Ablauf (zusammengefasst)**

1. Nutzer sieht verfügbaren Termin.
2. Registrierung & E-Mail-Verifikation.
3. Auswahl und Reservierung (mit Anmerkung).
4. Admin prüft Reservierung, sendet Nachricht.
5. Nutzer erhält Bestätigung/Ablehnung per Mail.

---

## ✅ **Fazit**

Das Grillhütten-Reservierungssystem kombiniert ein modernes, visuell ansprechendes Design mit einer sicheren, intuitiven und stabilen technischen Grundlage. Die Feuerwehr Waldems-Reichenbach erhält ein effizientes, wartungsfreundliches und benutzerfreundliches Verwaltungssystem, das gleichzeitig für die Öffentlichkeit leicht verständlich und attraktiv ist. Die modulare Struktur ermöglicht zukünftige Erweiterungen jederzeit unkompliziert und nahtlos.



Projektstruktur zur Integration
Nutze folgende angepasste Struktur innerhalb des Ordners /Grillhuette, basierend auf deiner aktuellen Struktur:

Homepage/
├── Private/
│   ├── Database/
│   │   └── Database.php            # Bereits bestehende DB-Verbindung nutzen
│   ├── Email/                      # Bereits vorhandener E-Mail-Versand
│   │   ├── phpmailer/
│   │   ├── signatur/
│   │   └── emailSender.php
│   └── Initializations/            # Konfigurationen nutzen
│       ├── db_config.ini
│       ├── smtpEmail_Config.ini
│       └── connectapi_config.ini
│
├── Public/
│   └── Grillhuette/                # Integration hier erfolgt modular
│       ├── app/
│       │   ├── controllers/
│       │   │   ├── AuthController.php
│       │   │   ├── ReservationController.php
│       │   │   └── AdminController.php
│       │   ├── models/
│       │   │   ├── User.php
│       │   │   └── Reservation.php
│       │   ├── helpers/
│       │   │   ├── ReservationHelper.php
│       │   │   └── SessionHelper.php
│       │   └── views/
│       │       ├── layout/
│       │       │   ├── header.php
│       │       │   ├── footer.php
│       │       │   └── navbar.php
│       │       ├── auth/
│       │       │   ├── login.php
│       │       │   ├── register.php
│       │       │   └── email_verify.php
│       │       ├── reservation/
│       │       │   ├── calendar.php
│       │       │   ├── create_reservation.php
│       │       │   ├── confirm_reservation.php
│       │       │   └── my_reservations.php
│       │       ├── admin/
│       │       │   ├── dashboard.php
│       │       │   ├── users.php
│       │       │   └── reservations.php
│       │       ├── settings/
│       │       │   └── profile.php
│       │       └── index.php
│       │
│       ├── assets/                 # Assets speziell für Grillhütte
│       │   ├── css/
│       │   │   └── grillhuette.css
│       │   ├── js/
│       │   │   ├── calendar.js
│       │   │   ├── reservation.js
│       │   │   └── validation.js
│       │   └── images/
│       └── scripts/
│           └── cleanup_unconfirmed.php
│
├── composer.json
├── composer.lock
├── vendor/
├── .gitignore
└── README.md

Datenbankintegration: 
CREATE TABLE gh_users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(255),
  email_verified BOOLEAN DEFAULT FALSE,
  verification_token VARCHAR(255),
  is_admin BOOLEAN DEFAULT FALSE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE gh_reservations (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  start_date DATE,
  end_date DATE,
  preferred_time TIME DEFAULT '12:00',
  user_note TEXT,                                   -- Anmerkung/Nachricht des Benutzers bei Reservierung
  admin_message VARCHAR(500),                       -- Admin-Nachricht an Benutzer (bei Bestätigung)
  status ENUM('pending', 'confirmed', 'declined') DEFAULT 'pending',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  confirmed_at DATETIME DEFAULT NULL,               -- Zeitpunkt der Bestätigung durch Admin
  FOREIGN KEY (user_id) REFERENCES gh_users(id) ON DELETE CASCADE
);




