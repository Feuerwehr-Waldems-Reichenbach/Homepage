# 🌲 **Grillhütten-Reservierungssystem – Feuerwehr Waldems Reichenbach**

Das Grillhütten-Reservierungssystem ist ein integriertes, modulares und modernes Online-Buchungssystem zur komfortablen Reservierung der Grillhütte in Waldems Reichenbach. Es basiert technisch auf **PHP, HTML, CSS, JavaScript** und **MySQL** und ist nahtlos in eine bestehende Webseite integriert.

Es vereint klassische Buchungslogik mit einer modernen, klaren Oberfläche, die im Design das Branding der Freiwilligen Feuerwehr Reichenbach widerspiegelt. Im Zentrum steht dabei die Nutzerfreundlichkeit sowie die einfache Verwaltung durch die Feuerwehr.

---

## 🎨 **Visuelles Konzept**

### 🔴 **Modernes Farbschema (Feuerwehr-Thematik)**

| Farbe       | Verwendung                                           |
|-------------|------------------------------------------------------|
| `#A72920`   | Primärfarbe (Buttons, Header, Links)                 |
| `#FFFFFF`   | Hintergrund                                          |
| `#F5F5F5`   | Karten, Sekundärbereiche                             |
| `#222222`   | Haupttextfarbe                                       |
| `#777777`   | Sekundärtext (Labels, Hinweise)                      |
| `#2E8B57`   | Erfolg (verfügbar, bestätigt)                        |
| `#FF9900`   | Warnungen („Ausstehend“)                             |
| `#DD3333`   | Fehler / Belegung (reserviert)                       |

### 🔷 **Seitenaufbau (modern, bewährt und intuitiv)**

- **Header (sticky):**
  - Logo Feuerwehr Reichenbach links
  - Navigationsleiste (Startseite, Reservieren, Meine Buchungen, Admin)
  - Benutzer-Login/-Logout oben rechts

- **Footer (fix):**
  - Kontakt zur Feuerwehr Reichenbach
  - Impressum, Datenschutz

- **Kalender & Interaktive Elemente:**
  - Dynamischer Kalender (FullCalendar.js)
  - Farbige Markierungen (rot: reserviert, grün: verfügbar, orange: ausstehend)
  - Tooltips bei Mouseover mit Infos (Benutzername, Status)

---

## 🖥️ **Visuelle & funktionelle Beschreibung (Benutzerperspektive)**

### 🔸 **Startseite (unauthentifiziert)**

**Optisch:**
- Modernes minimalistisches Design, Feuerwehr-Farben (`#A72920`) im Vordergrund
- Schlichter Hintergrund 
- Kalender zentral, Login-/Registrierungsoption oben rechts klar erkennbar

**Funktionell:**
- Schnelle Übersicht der Verfügbarkeit im Kalender
- Klick auf freie Tage fordert Nutzer zum Login oder zur Registrierung auf
- Seite soll nicht scrollbar sein, alle Elemente sind gut erreichbar plaziert

---

### 🔸 **Registrierung & Anmeldung**

**Optisch:**
- Kompakte, intuitive Formulare
- Klar abgegrenzte Felder: Name, E-Mail-Adresse, Telefonnummer (optional) , Passwort

**Funktionell:**
- Registrierung nur mit E-Mail-Verifikation
- Verschlüsselte Speicherung von Passwörtern (bcrypt)
-einfache vor Überprüfung der ausgefüllten Felder auf Korrektheit
- Email kann nicht 2 mal benutzt werden

---

### 🔸 **Reservierung erstellen**

**Optisch:**
- Übersichtliche Datumswahl im Kalender oder per manueller Eingabe
- Bevorzugte Uhrzeit auswählbar (standardmäßig 12:00 Uhr)
- Großes Eingabefeld für persönliche Anmerkungen

**Funktionell:**
- Automatische Prüfung und Blockierung belegter Tage
- Status „ausstehend“ nach Erstellung
- Nutzer erhält Zusammenfassung und Bestätigung per E-Mail
- 2 termine werden zur Auswahl benötigt, Start und Ende, es kann auch nur 1 Tag ausgewählt werden. 
- System bemerkt automatisch start und Ende, auf Basis des Datums
- bei Auswahl werden alle mit inbegriffen Tage deutlich markiert
- falls bei einem Tag nur bis zu einer bestimmten Uhrzeit die Reservierung möglich ist, kann auch nur bis zu der Uhrzeit ausgewählt werden. 
---

### 🔸 **Reservierungsübersicht (Benutzerbereich)**

**Optisch:**
- Klar getrennte Bereiche: „Zukünftige Reservierungen“ und „Vergangene Reservierungen“
- Statusanzeige deutlich hervorgehoben („Ausstehend“, „Bestätigt“, „Abgelehnt“)
- Admin-Kommentare gut lesbar dargestellt

**Funktionell:**
- Automatische Benachrichtigung bei Statusänderung per E-Mail
- Direkter Zugriff auf Admin-Nachricht

---

### 🔸 **Benutzerprofil-Einstellungen**

**Optisch:**
- Einfache Seite für schnelle Einstellungen
- Felder: Name, E-Mail, Passwortänderung klar gegliedert

**Funktionell:**
- Änderungen sicher gespeichert, erneute E-Mail-Verifikation bei Änderung

---

## ⚙️ **Admin-Bereich (Verwaltung durch Feuerwehr)**

### 🔸 **Dashboard**

**Optisch:**
- Kompakte Übersicht über Reservierungen mit Status und Terminen
- Direktzugriff auf wichtige Verwaltungsaufgaben

**Funktionell:**
- Schnelle Bearbeitung ausstehender Reservierungen

---

### 🔸 **Reservierungen verwalten**

**Optisch:**
- Tabellenform mit Such- und Filtermöglichkeiten
- Farbige Hervorhebung von Status

**Funktionell:**
- Bestätigung oder Ablehnung inklusive persönlicher Admin-Nachricht
- Automatische Benachrichtigung der Nutzer
- Automatische Löschung ausstehender Reservierungen nach 10 Tagen
- Möglichkeit zur Erstellung und Zuweisung von Reservierungen

---

### 🔸 **Benutzerverwaltung**

**Optisch:**
- Klare, einfache Auflistung aller Nutzer
- Admin-Nutzer farblich hervorgehoben

**Funktionell:**
- Nutzerinformationen bearbeiten, löschen oder Rechte ändern, und anlegen neuer Benutzer. 

---

## 🔄 **Automatische Hintergrundprozesse (Cronjob)**

- Automatische Löschung unbestätigter Reservierungen nach 10 Tagen
- Benachrichtigung betroffener Nutzer per E-Mail

---

## 📅 **Technische Beschreibung (Backend & Frontend)**

### 🔸 **Backend (PHP/MySQL):**
- MVC-orientierte Architektur (Controller-Model-View)
- Bestehende Datenbankverbindung integriert (Database.php) 
- Nutzung der emailSender.php
- Prepared Statements verhindern SQL-Injection

### 🔸 **Frontend (HTML/CSS/JS):**
- Responsives, mobiles Design
- Klar strukturiertes CSS mit modularem Aufbau
- Dynamische Inhalte via AJAX/Fetch API (z.B. Kalender)
- Direkte Clientseitige Validierung (Usability)
- und serverseitige Validierung für optimale Sicherheit 

---

## 📧 **E-Mail-Kommunikation**

- Einheitliches Layout mit Feuerwehr-Signatur
- Automatische Nachrichten bei Registrierung, Reservierung, Bestätigung oder Ablehnung

---

## 🛡️ **Sicherheitsmerkmale**

- Passwortverschlüsselung mit bcrypt
- Schutz vor SQL-Injection (Prepared Statements)
- E-Mail-Verifizierung gegen Spam

---

## 🚀 **Benutzerfreundlichkeit & UX-Highlights**

- Modale Dialoge für angenehme Nutzerführung
- Animationen (hover, klick) erhöhen Interaktivität und modernes aber seriöses Feeling
- Klare und transparente Statuskommunikation

## 📌 **Typischer Ablauf (zusammengefasst)**

1. Nutzer sieht verfügbaren Termin.
2. Registrierung & E-Mail-Verifikation.
3. Auswahl und Reservierung (mit Anmerkung).
4. Admin prüft Reservierung, und bestätigt
5. System sendet Bestätigungs Email an Nutzer 


---

## ✅ **Fazit**

Das Grillhütten-Reservierungssystem kombiniert ein modernes, visuell ansprechendes Design mit einer sicheren, intuitiven und stabilen technischen Grundlage. Die Feuerwehr Waldems-Reichenbach erhält ein effizientes, wartungsfreundliches und benutzerfreundliches Verwaltungssystem, das gleichzeitig für die Öffentlichkeit leicht verständlich und attraktiv ist. Die modulare Struktur ermöglicht zukünftige Erweiterungen jederzeit unkompliziert und nahtlos.


Projektstruktur zur Integration
Nutze folgende angepasste Struktur innerhalb des Ordners /Grillhuette, basierend auf deiner aktuellen Struktur:



Projektstruktur zur Integration
Nutze folgende angepasste Struktur innerhalb des Ordners /Grillhuette, basierend auf deiner aktuellen Struktur:

Homepage/
├── Private/
│   ├── Database/
│   │   └── Database.php            # Bereits bestehende DB-Verbindung nutzen
│   │   └── dbs12777311.sql         
│   ├── Email/                      
│      └── emailSender.php          # Bereits vorhandener E-Mail-Versand
│
├── Public/
│   └── Grillhuette/                # Integration hier erfolgt modular
│       ├── app/
│       │   ├── controllers/
│       │   │   ├── AuthController.php
│       │   │   ├── ReservationController.php
│       │   │   └── AdminController.php
│       │   ├── models/
│       │   │   ├── User.php
│       │   │   └── Reservation.php
│       │   ├── helpers/
│       │   │   ├── ReservationHelper.php
│       │   │   └── SessionHelper.php
│       │   └── views/
│       │       ├── layout/
│       │       │   ├── header.php
│       │       │   ├── footer.php
│       │       │   └── navbar.php
│       │       ├── auth/
│       │       │   ├── login.php
│       │       │   ├── register.php
│       │       │   └── email_verify.php
│       │       ├── reservation/
│       │       │   ├── calendar.php
│       │       │   ├── create_reservation.php
│       │       │   ├── confirm_reservation.php
│       │       │   └── my_reservations.php
│       │       ├── admin/
│       │       │   ├── dashboard.php
│       │       │   ├── users.php
│       │       │   └── reservations.php
│       │       ├── settings/
│       │       │   └── profile.php
│       │       └── index.php
│       │
│       ├── assets/                 # Assets speziell für Grillhütte
│       │   ├── css/
│       │   │   └── grillhuette.css
│       │   ├── js/
│       │   │   ├── calendar.js
│       │   │   ├── reservation.js
│       │   │   └── validation.js
│       │   └── images/
│       └── scripts/
│           └── cleanup_unconfirmed.php
│
├── composer.json
├── composer.lock
├── vendor/
├── .gitignore
└── README.md

Datenbankintegration: 
CREATE TABLE gh_users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email_verified BOOLEAN DEFAULT FALSE,
    verification_token VARCHAR(255),
    is_admin BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE gh_reservations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    start_time TIME DEFAULT '12:00',
    end_time TIME DEFAULT '22:00',
    user_note TEXT,
    admin_message VARCHAR(500),
    status ENUM('pending', 'confirmed', 'declined') DEFAULT 'pending',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    confirmed_at DATETIME DEFAULT NULL,
    FOREIGN KEY (user_id) REFERENCES gh_users(id) ON DELETE CASCADE
);

CREATE TABLE gh_password_resets (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    token VARCHAR(255) NOT NULL UNIQUE,
    expires_at DATETIME NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES gh_users(id) ON DELETE CASCADE
);


